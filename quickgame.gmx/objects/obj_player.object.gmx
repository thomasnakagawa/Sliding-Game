<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>vec_stand_front</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>999</depth>
  <persistent>0</persistent>
  <parentName>base_interact</parentName>
  <maskName>spr_smallmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this script needs for an object called game to exist, with the member double hgrid
upkey = vk_up;
downkey = vk_down;
leftkey = vk_left;
rightkey = vk_right;
movpercent = 0.1;
base_speed = game.hgrid/8;
tarx = 0;
tary = 0;
max_speed = game.hgrid * .75;
movement = "down";

moving = false;
stuck = false;
followers = 0;


inputs = ds_queue_create();

//make intro particle
intro_particle = obj_playerintro;
outro_particle = obj_playeroutro;
event_inherited();
depth = -9999;

for(var i = 0; i &lt; 300; i++) xhistory[i] = x;
for(var i = 0; i &lt; 300; i++) yhistory[i] = y;
history_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this script needs the following to exist:
//an object "base_plat" that has the bool member "activate"
//an object "obj_key" that inherits from "base_plat"

if(ds_queue_size(inputs) &lt; 4) //get movement inputs
{
    if(keyboard_check_pressed(upkey)) ds_queue_enqueue(inputs,"up");
    else if(keyboard_check_pressed(downkey)) ds_queue_enqueue(inputs,"down");
    else if(keyboard_check_pressed(leftkey)) ds_queue_enqueue(inputs,"left");
    else if(keyboard_check_pressed(rightkey)) ds_queue_enqueue(inputs,"right");
    
}
if(!moving)
{
    if(!ds_queue_empty(inputs))
    {
        var in = ds_queue_dequeue(inputs);//get next input
        //get the target position for this move
        if(in == "up")
        {
            tary = y;
            tarx = x;
            movement = "up";
            while(place_meeting(x,tary-game.vgrid,base_plat))
            {
                moving = true;
                tary -= game.vgrid;
            }
        }
        else if(in == "down")
        {
            tary = y;
            tarx = x;
            movement = "down";
            while(position_meeting(x,tary+game.vgrid,base_plat))
            {
                moving = true;
                tary += game.vgrid;
            }
        }
        else if(in == "right")
        {
            tary = y;
            tarx = x;                
            movement = "right";
            while(place_meeting(tarx+game.hgrid,y,base_plat))
            {
                moving = true;
                tarx += game.hgrid;
            }
        }
        else if(in == "left")
        {
            tary = y;
            tarx = x;
                            movement = "left";
            while(place_meeting(tarx-game.hgrid,y,base_plat))
            {
                moving = true;
                tarx -= game.hgrid;
            }
        }
    }//stack not empty
}//not moving
else if(moving){
    //set horizontal(xx) and vertical(yy) speed
    var xx = ((tarx-x)*movpercent + base_speed * sign(tarx-x));
    var yy = ((tary-y)*movpercent + base_speed * sign(tary-y));
    //limit to max speeds
    if(xx &gt; max_speed) xx = max_speed;
    if(xx &lt; -max_speed) xx = -max_speed;
    if(yy &gt; max_speed) yy = max_speed;
    if(yy &lt; -max_speed) yy = -max_speed;
    //if really close to the target, then set the speed so that youre going to be exactly on the target
    if(point_distance(x,y,tarx,tary) &lt; base_speed)
    {
        xx = tarx-x;
        yy = tary-y;
    }

    //determine the range (absolute distance) that this object will be moving this frame
    var range = 0;
    if(xx != 0) range = xx;
    if(yy != 0) range = yy;
    range = abs(range);
    //activate any blocks underfoot
    for(var i = 0; i &lt;= range; i++)
    {
        var xtemp = x+(i * sign(xx));
        var ytemp = y+(i * sign(yy));

        
        if(instance_position(xtemp,ytemp,base_plat) != noone)
        {
            var inst_stand = instance_position(xtemp,ytemp,base_plat);
            inst_stand.activate = true;
            
            //check if standing on key. If so, then exit this script
            if(inst_stand.object_index == obj_key){
                x = xtemp;
                y = ytemp;
                inst_stand.been_used = true;
                instance_destroy();
                exit;
            }
        }
        //activate any follower objects
        if(instance_position(xtemp,ytemp,obj_follow) != noone)
        {
            var inst_fol = instance_position(xtemp,ytemp,obj_follow);
            if(inst_fol.active = false)
            {
                inst_fol.host = self.id;
                inst_fol.delay = 3 * (followers+1);
                with(inst_fol){
                    alarm[0] = delay;
                }
                inst_fol.active = true;
                followers++;
            }
        }
    }
    //move self 
    x += xx;
    y += yy;
    
    
    //check if at the target for movement. if so , then stop
    if(floor(x) == tarx &amp;&amp; floor(y) == tary)
    {
        x = tarx;
        y = tary;
        //movement = "none";
        moving = false;  
        //check if stuck
        if( !place_meeting(x,y-game.vgrid,base_plat) &amp;&amp;
            !place_meeting(x,y+game.vgrid,base_plat) &amp;&amp;
            !place_meeting(x-game.hgrid,y,base_plat) &amp;&amp;
            !place_meeting(x+game.hgrid,y,base_plat)){
                stuck = true;
        }
    }
}
setImage(moving, movement);
history_index = (history_index+1) % 300;
xhistory[history_index] = x;
yhistory[history_index] = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(moving) // this is old code from before the good penguin graphics.
{
    draw_sprite_ext(sprite_index,0,x,y,scale_gain,scale_gain,0,c_black,1);
}
else*/
{
    draw_sprite_ext(sprite_index,0,x,y,scale_gain,scale_gain,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
