<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-90</depth>
  <persistent>0</persistent>
  <parentName>base_interact</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upkey = vk_up;
downkey = vk_down;
leftkey = vk_left;
rightkey = vk_right;
movpercent = 0.1;
base_speed = floor(game.hgrid/8);
tarx = 0;
tary = 0;
max_speed = game.hgrid-2;
movement = "none";

moving = false;
busy = false;
busytimer = 0;
busyscale = 1;
flying = false;



inputs = ds_queue_create();

//make intro
var intro = instance_create(x,-16,obj_playerintro);
intro.tary = y;
intro.host = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(flying &amp;&amp; visible)
{
    instance_create(x,y,obj_playerleave);
    moving = false;
    with(base_plat)
    {
        instance_destroy();
    }
    instance_destroy();
}


if(ds_queue_size(inputs) &lt; 4)
{
    if(keyboard_check_pressed(upkey)) ds_queue_enqueue(inputs,"up");
    else if(keyboard_check_pressed(downkey)) ds_queue_enqueue(inputs,"down");
    else if(keyboard_check_pressed(leftkey)) ds_queue_enqueue(inputs,"left");
    else if(keyboard_check_pressed(rightkey)) ds_queue_enqueue(inputs,"right");
    
}
if(!moving)
{
    if(!ds_queue_empty(inputs))
    {
        var in = ds_queue_dequeue(inputs);
        if(in == "up")
        {
            tary = y;
            tarx = x;
            while(place_meeting(x,tary-game.vgrid,base_plat))
            {
                moving = true;
                tary -= game.vgrid;
                movement = "up";
            }
            if(!moving)//if nowhere to go
            {
                //invalid move
            }
        }
        else if(in == "down")
        {
            tary = y;
            tarx = x;
            while(place_meeting(x,tary+game.vgrid,base_plat))
            {
                moving = true;
                tary += game.vgrid;
                movement = "down";
            }
        }
        else if(in == "right")
        {
            tary = y;
            tarx = x;
            while(place_meeting(tarx+game.hgrid,y,base_plat))
            {
                moving = true;
                tarx += game.hgrid;
                movement = "right";
            }
        }
        else if(in == "left")
        {
            tary = y;
            tarx = x;
            while(place_meeting(tarx-game.hgrid,y,base_plat))
            {
                moving = true;
                tarx -= game.hgrid;
                movement = "left";
            }
        }
    }//stack not empty
}//moving
else if(moving)
{
    //set horizontal(xx) and vertical(yy) speed
    var xx = ((tarx-x)*movpercent + base_speed * sign(tarx-x));
    var yy = ((tary-y)*movpercent + base_speed * sign(tary-y));
    if(xx &gt; max_speed) xx = max_speed;
    if(xx &lt; -max_speed) xx = -max_speed;
    if(yy &gt; max_speed) yy = max_speed;
    if(yy &lt; -max_speed) yy = -max_speed;
    if(point_distance(x,y,tarx,tary) &lt; base_speed)
    {
        xx = tarx-x;
        yy = tary-y;
    }

    //activate the blocks under
    var hmov = false;
    var vmov = false;
    if(xx != 0) hmov = true;
    if(yy != 0) vmov = true;
    var range = 0;
    if(hmov) range = xx;
    if(vmov) range = yy;
    range = abs(range);
    var breaker = false;
    for(var i = 0; i &lt;= range &amp;&amp; !breaker; i++)
    {
        var xtemp = x+(i * sign(xx));
        var ytemp = y+(i * sign(yy));
        if(position_meeting(xtemp,ytemp,base_plat))
        {
            var obj = instance_position(xtemp,ytemp,base_plat);
            obj.activate = true;
            //breaker = true;
        }
    }
    //move the object  
    {
        x += xx;
        y += yy;
    }

    if(floor(x) == tarx &amp;&amp; floor(y) == tary)
    {
        x = tarx;
        y = tary;
        movement = "none";
        moving = false;  
    }
    
    if(keyboard_check_pressed(leftkey) || keyboard_check_pressed(rightkey) || keyboard_check_pressed(upkey) || keyboard_check_pressed(downkey))
    {
        //invalid move
        busy = true;
        busytimer = 10;
    }

}
if(busy)
{
    busyscale = 1 - ((10-busytimer)*.05);
    busytimer--;
    if(busytimer &lt; 1) busy = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(busy &amp;&amp; moving)
{
    draw_sprite_ext(sprite_index,0,x,y,busyscale,busyscale,0,c_black,1);
}
else if(moving)
{
    draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_black,1);
}
else
{
    draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
