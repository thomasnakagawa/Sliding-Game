<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_person</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>base_testers</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upkey = vk_up;
downkey = vk_down;
leftkey = vk_left;
rightkey = vk_right;
movpercent = 0.1;
base_speed = floor(32/8);
tarx = 0;
tary = 0;
max_speed = 32-2;
movement = "none";

moving = false;


inputs = ds_queue_create();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this script needs the following to exist:
//an object "base_plat" that has the bool member "activate" /
//an object "obj_key" that inherits from "base_plat"

if(ds_queue_size(inputs) &lt; 4) //get movement inputs
{
    if(keyboard_check_pressed(upkey)) ds_queue_enqueue(inputs,"up");
    else if(keyboard_check_pressed(downkey)) ds_queue_enqueue(inputs,"down");
    else if(keyboard_check_pressed(leftkey)) ds_queue_enqueue(inputs,"left");
    else if(keyboard_check_pressed(rightkey)) ds_queue_enqueue(inputs,"right");
    
}
if(!moving)
{
    if(!ds_queue_empty(inputs))
    {
        var in = ds_queue_dequeue(inputs);//get next input
        //get the target position for this move
        if(in == "up")
        {
            tary = y;
            tarx = x;
            while(place_meeting(x,tary-32,base_plat))
            {
                moving = true;
                tary -= 32;
                movement = "up";
            }
        }
        else if(in == "down")
        {
            tary = y;
            tarx = x;
            while(place_meeting(x,tary+32,base_plat))
            {
                moving = true;
                tary += 32;
                movement = "down";
            }
        }
        else if(in == "right")
        {
            tary = y;
            tarx = x;
            while(place_meeting(tarx+32,y,base_plat))
            {
                moving = true;
                tarx += 32;
                movement = "right";
            }
        }
        else if(in == "left")
        {
            tary = y;
            tarx = x;
            while(place_meeting(tarx-32,y,base_plat))
            {
                moving = true;
                tarx -= 32;
                movement = "left";
            }
        }
    }//stack not empty
}//not moving
else if(moving)
{
    //set horizontal(xx) and vertical(yy) speed
    var xx = ((tarx-x)*movpercent + base_speed * sign(tarx-x));
    var yy = ((tary-y)*movpercent + base_speed * sign(tary-y));
    //limit to max speeds
    if(xx &gt; max_speed) xx = max_speed;
    if(xx &lt; -max_speed) xx = -max_speed;
    if(yy &gt; max_speed) yy = max_speed;
    if(yy &lt; -max_speed) yy = -max_speed;
    //if really close to the target, then set the speed so that youre going to be exactly on the target
    if(point_distance(x,y,tarx,tary) &lt; base_speed)
    {
        xx = tarx-x;
        yy = tary-y;
    }

    //determine the range (absolute distance) that this object will be moving this frame
    var range = 0;
    if(xx != 0) range = xx;
    if(yy != 0) range = yy;
    range = abs(range);
    //activate any blocks underfoot
    for(var i = 0; i &lt;= range; i++)
    {
        var xtemp = x+(i * sign(xx));
        var ytemp = y+(i * sign(yy));
        if(position_meeting(xtemp,ytemp,base_plat))
        {
            var obj = instance_position(xtemp,ytemp,base_plat);
            obj.activate = true;
        }
        //check if standing on key, if so, then leave the stage
        if(position_meeting(xtemp,ytemp,obj_test_key)){
            x = xtemp;
            y = ytemp;
            instance_destroy();
            exit;
        }
    }
    //move self  
    {
        x += xx;
        y += yy;
    }
    
    //check if at the target for movement. if so , then stop
    if(floor(x) == tarx &amp;&amp; floor(y) == tary)
    {
        x = tarx;
        y = tary;
        movement = "none";
        moving = false;  
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(moving)
{
    draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_black,1);
}
else
{
    draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
